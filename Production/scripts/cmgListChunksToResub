#!/bin/bash

# define valid options, those with trailing colon have a second argument
OPTS=`getopt -n 'parse-options' -o hTdt:lpq:zf: --long help -- "$@"`

if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

eval set -- "$OPTS"
# set default values
HELP=false
TERSE=/bin/false
LSFL=false
F=JSONAnalyzer/JSON.pck
LOC=false
P=false
Q=""
Z=false

# evaluate parameters
while true; do
  case "$1" in
    -h | --help )   HELP=true; shift ;;
    -T )            TERSE=/bin/true; shift ;;
    -d )            LSFL=true; shift ;;
    -t )            F="$2"; shift 2 ;;
    -l )            LOC=true; shift ;;
    -p )            P=true; shift ;;
    -q )            Q="$Q -q $2"; shift 2 ;;
    -f )            Q="$Q -t $2"; shift 2 ;;
    -z )            Z=true; shift ;;
    -- )            shift; break ;;
    *  )            break ;;
  esac
done

# define help function with instructions
function help {
    echo "Usage: $0 [ -q <queue> ] directory"
    echo "Will look in the specified directory (or in the current one if none is specified),  "
    echo "list failed jobs and print the cmgResubChunk commands to resubmit them."
    echo "The default queue is 8nh"
    echo "further options:"
    echo "-T  terse output"
    echo "-d  check for a LSFJOB_ dir or non-empty condor*.out"
    echo "-t <filename>  name of ROOT file to check for zombie (option -z)"
    echo "-l  print commands for local running instead of batch submission"
    echo "-p  check for null pck files"
    echo "-q  queue to resubmit to (use HTCondor to resubmit to HTCondor instead of LSF)"
    echo "-f  HTCondor queue flavour (or time)"
    echo "-z  check for zombie ROOT files"
    exit 1;
}

# call help function in case help parameter has been set or no directory parameter has been given
if $HELP || [ "$1" == "" ]; then
    help;
fi

if $LSFL; then
    $TERSE || echo "# Will check for a LSFJOB_ dir or non-empty condor*.out "
fi

$TERSE || echo "# Will test for the presence of file $F"

if $P; then
    $TERSE || echo "# Will also check for null pck files"
fi

if $Z; then
    $TERSE || echo "# Will also check if rootfiles are zombies or not"
fi

# set the base directory to start from
BASE="";
if [[ "$1" != "" && "$1" != "." ]]; then
    test -d $1 && cd $1 && BASE="$PWD/";
fi

JOBSTORESUB=()
$TERSE || echo "# Will print out the commands to resubmit the chunks that failed "
for D in */; do
    if [ ! -f "$D/config.pck" ]; then
        # only consider standard heppy output directories
        echo "# skipping directory: $D"
        continue
    fi
    PCKBAD=false
    # test if there are empty pickle files
    ${P} && find $D -name '*.pck' -empty -follow | grep -q pck && PCKBAD=true;
    # test if file to be tested for is present and whether bad pickle file flag has been set
    if test \! -s $D/$F || $PCKBAD; then
        # check for batch directory if requested or proceed to command printout
        if [ "${LSFL}" = false ] || find $D -maxdepth 1 -type d -name 'LSFJOB_*'  -or -name 'condor_job*.out' -not -empty | grep -q . || test -f $D/submission_failed ; then
            cmd="cmgResubChunk $Q ${BASE}${D}";
            if $LOC; then
                cmd="cmgRunChunkLocally ${BASE}${D}";
	    fi
            reason="missing"
            if $PCKBAD; then
                reason="bad pck"
            fi
            JOBSTORESUB+=("${cmd}     #${reason}")
        else
            $TERSE || echo "# Chunk ${BASE}${D} does not have a LSFJOB directory, maybe still running? ";
        fi;
    fi;
done;

if $Z; then
    $TERSE || echo "# Testing for zombies";
    for ZOMBIE in $(cmgListZombies  "*/$F"); do
        if test -s $ZOMBIE; then # empty files have already been found
            D=${ZOMBIE%%/*};
            cmd="cmgResubChunk $Q ${BASE}${D}";
            if $LOC; then
                echo "cmgRunChunkLocally ${BASE}${D}     # zombie";
            else
                echo "cmgResubChunk $Q ${BASE}${D}    # zombie";
            fi
            JOBSTORESUB+=("${cmd}     #is zombie")
        fi;
    done
fi;

for ((i = 0; i < ${#JOBSTORESUB[@]}; i++))
do
    echo ${JOBSTORESUB[$i]};
done

